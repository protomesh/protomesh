version: "3.5"
services:

  envoy-xds:
    image: protomesh:local
    build:
      context: .
      dockerfile: Containerfile
    restart: always
    command: protomesh -config-file /var/protomesh/envoy_xds.toml
    env_file:
      - .env
    volumes:
      - ${PWD}/cmd/envoy_xds.toml:/var/protomesh/envoy_xds.toml
    networks:
      - protomesh
    ports:
      - 7011:7011
    depends_on:
      - server

  proxy:
    image: protomesh:local
    build:
      context: .
      dockerfile: Containerfile
    restart: always
    command: protomesh -config-file /var/protomesh/proxy.toml
    env_file:
      - .env
    volumes:
      # Mount /var/run so we can access docker.sock and talk to Docker
      - /var/run:/var/run
      # Mount the shared configuration directory, used by the AWS CLI and AWS SDKs
      # On Windows, this directory can be found at "%UserProfile%\.aws"
      - $HOME/.aws/:/home/.aws/
      # Configuration file
      - ${PWD}/cmd/proxy.toml:/var/protomesh/proxy.toml
    environment:
      # define the home folder; credentials will be read from $HOME/.aws
      HOME: "/home"
    networks:
      - protomesh
    ports:
      - 5770:5770
    depends_on:
      - server

  server:
    image: protomesh:local
    build:
      context: .
      dockerfile: Containerfile
    restart: always
    command: protomesh -config-file /var/protomesh/server.toml
    env_file:
      - .env
    volumes:
      - ${PWD}/cmd/server.toml:/var/protomesh/server.toml
    networks:
      - protomesh
    ports:
      - 6680:6680
    depends_on:
      - postgresql

  server-ui:
    image: fullstorydev/grpcui
    restart: always
    entrypoint:
      - /bin/grpcui
    command:
      # - -plaintext
      - -use-reflection
      - -vv
      - -insecure
      - -port
      - '8080'
      - -bind
      - '0.0.0.0'
      - -debug-client
      - -open-browser=false
      - server:6680
    networks:
      - protomesh
    ports:
      - '6690:8080'
    depends_on:
      - server

  worker:
    image: protomesh:local
    build:
      context: .
      dockerfile: Containerfile
    restart: always
    command: protomesh -config-file /var/protomesh/worker.toml
    env_file:
      - .env
    volumes:
      - ${PWD}/cmd/worker.toml:/var/protomesh/worker.toml
    networks:
      - protomesh
    depends_on:
      - server
      - temporal

  # dynamodb:
  #   image: amazon/dynamodb-local
  #   command:
  #     - -jar
  #     - DynamoDBLocal.jar
  #     - -sharedDb
  #     # - -inMemory
  #     - -port
  #     - '8000'
  #   restart: always
  #   ports:
  #     - 8000:8000
  #   networks:
  #     - protomesh

  # dynamodb-admin:
  #   image: aaronshaf/dynamodb-admin
  #   ports:
  #     - 8001:8001
  #   environment:
  #     DYNAMO_ENDPOINT: "http://dynamodb:8000"
  #   depends_on:
  #     - dynamodb
  #   restart: always
  #   networks:
  #     - protomesh

  # elasticsearch:
  #   environment:
  #     - cluster.routing.allocation.disk.threshold_enabled=true
  #     - cluster.routing.allocation.disk.watermark.low=512mb
  #     - cluster.routing.allocation.disk.watermark.high=256mb
  #     - cluster.routing.allocation.disk.watermark.flood_stage=128mb
  #     - discovery.type=single-node
  #     - ES_JAVA_OPTS=-Xms256m -Xmx256m
  #     - xpack.security.enabled=false
  #   image: elasticsearch:${ELASTICSEARCH_VERSION}
  #   networks:
  #     - protomesh
  #   ports:
  #     - 9200:9200
  #   volumes:
  #     - /var/lib/elasticsearch/data

  postgresql:
    environment:
      POSTGRES_PASSWORD: protomesh
      POSTGRES_USER: protomesh
    image: postgres:${POSTGRESQL_VERSION}
    networks:
      - protomesh
    ports:
      - 5432:5432
    volumes:
      - /var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@localhost.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
       - ${PWD}/provider/postgres/servers.json:/pgadmin4/servers.json
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - protomesh
    restart: unless-stopped

  # temporal:
  #   restart: always
  #   depends_on:
  #     - postgresql
  #     - elasticsearch
  #   environment:
  #     - DB=postgresql
  #     - DB_PORT=5432
  #     - POSTGRES_USER=protomesh
  #     - POSTGRES_PWD=protomesh
  #     - POSTGRES_SEEDS=postgresql
  #     - ENABLE_ES=true
  #     - ES_SEEDS=elasticsearch
  #     - ES_VERSION=v7
  #   image: temporalio/auto-setup:${TEMPORAL_VERSION}
  #   networks:
  #     - protomesh
  #   ports:
  #     - 7233:7233
  #   labels:
  #     kompose.volume.type: configMap

  # temporal-admin-tools:
  #   depends_on:
  #     - temporal
  #   environment:
  #     - TEMPORAL_CLI_ADDRESS=temporal:7233
  #   image: temporalio/admin-tools:${TEMPORAL_VERSION}
  #   networks:
  #     - protomesh
  #   stdin_open: true
  #   tty: true

  # temporal-ui:
  #   depends_on:
  #     - temporal
  #   environment:
  #     - TEMPORAL_ADDRESS=temporal:7233
  #     - TEMPORAL_CORS_ORIGINS=http://localhost:3000
  #   image: temporalio/ui:${TEMPORAL_UI_VERSION}
  #   networks:
  #     - protomesh
  #   ports:
  #     - 8080:8080

networks:
  protomesh:
    driver: bridge
    name: protomesh
