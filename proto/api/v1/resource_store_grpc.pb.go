// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/v1/resource_store.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResourceStoreClient is the client API for ResourceStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceStoreClient interface {
	Put(ctx context.Context, in *PutResourceRequest, opts ...grpc.CallOption) (*PutResourceResponse, error)
	Drop(ctx context.Context, in *DropResourcesRequest, opts ...grpc.CallOption) (*DropResourcesResponse, error)
	DropBefore(ctx context.Context, in *DropBeforeResourcesRequest, opts ...grpc.CallOption) (*DropBeforeResourcesResponse, error)
	List(ctx context.Context, opts ...grpc.CallOption) (ResourceStore_ListClient, error)
}

type resourceStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceStoreClient(cc grpc.ClientConnInterface) ResourceStoreClient {
	return &resourceStoreClient{cc}
}

func (c *resourceStoreClient) Put(ctx context.Context, in *PutResourceRequest, opts ...grpc.CallOption) (*PutResourceResponse, error) {
	out := new(PutResourceResponse)
	err := c.cc.Invoke(ctx, "/graviflow.api.v1.ResourceStore/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceStoreClient) Drop(ctx context.Context, in *DropResourcesRequest, opts ...grpc.CallOption) (*DropResourcesResponse, error) {
	out := new(DropResourcesResponse)
	err := c.cc.Invoke(ctx, "/graviflow.api.v1.ResourceStore/Drop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceStoreClient) DropBefore(ctx context.Context, in *DropBeforeResourcesRequest, opts ...grpc.CallOption) (*DropBeforeResourcesResponse, error) {
	out := new(DropBeforeResourcesResponse)
	err := c.cc.Invoke(ctx, "/graviflow.api.v1.ResourceStore/DropBefore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceStoreClient) List(ctx context.Context, opts ...grpc.CallOption) (ResourceStore_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResourceStore_ServiceDesc.Streams[0], "/graviflow.api.v1.ResourceStore/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceStoreListClient{stream}
	return x, nil
}

type ResourceStore_ListClient interface {
	Send(*ListResourcesRequest) error
	Recv() (*ListResourcesResponse, error)
	grpc.ClientStream
}

type resourceStoreListClient struct {
	grpc.ClientStream
}

func (x *resourceStoreListClient) Send(m *ListResourcesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *resourceStoreListClient) Recv() (*ListResourcesResponse, error) {
	m := new(ListResourcesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ResourceStoreServer is the server API for ResourceStore service.
// All implementations must embed UnimplementedResourceStoreServer
// for forward compatibility
type ResourceStoreServer interface {
	Put(context.Context, *PutResourceRequest) (*PutResourceResponse, error)
	Drop(context.Context, *DropResourcesRequest) (*DropResourcesResponse, error)
	DropBefore(context.Context, *DropBeforeResourcesRequest) (*DropBeforeResourcesResponse, error)
	List(ResourceStore_ListServer) error
	mustEmbedUnimplementedResourceStoreServer()
}

// UnimplementedResourceStoreServer must be embedded to have forward compatible implementations.
type UnimplementedResourceStoreServer struct {
}

func (UnimplementedResourceStoreServer) Put(context.Context, *PutResourceRequest) (*PutResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedResourceStoreServer) Drop(context.Context, *DropResourcesRequest) (*DropResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Drop not implemented")
}
func (UnimplementedResourceStoreServer) DropBefore(context.Context, *DropBeforeResourcesRequest) (*DropBeforeResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropBefore not implemented")
}
func (UnimplementedResourceStoreServer) List(ResourceStore_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedResourceStoreServer) mustEmbedUnimplementedResourceStoreServer() {}

// UnsafeResourceStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceStoreServer will
// result in compilation errors.
type UnsafeResourceStoreServer interface {
	mustEmbedUnimplementedResourceStoreServer()
}

func RegisterResourceStoreServer(s grpc.ServiceRegistrar, srv ResourceStoreServer) {
	s.RegisterService(&ResourceStore_ServiceDesc, srv)
}

func _ResourceStore_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceStoreServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graviflow.api.v1.ResourceStore/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceStoreServer).Put(ctx, req.(*PutResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceStore_Drop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceStoreServer).Drop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graviflow.api.v1.ResourceStore/Drop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceStoreServer).Drop(ctx, req.(*DropResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceStore_DropBefore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropBeforeResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceStoreServer).DropBefore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graviflow.api.v1.ResourceStore/DropBefore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceStoreServer).DropBefore(ctx, req.(*DropBeforeResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceStore_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ResourceStoreServer).List(&resourceStoreListServer{stream})
}

type ResourceStore_ListServer interface {
	Send(*ListResourcesResponse) error
	Recv() (*ListResourcesRequest, error)
	grpc.ServerStream
}

type resourceStoreListServer struct {
	grpc.ServerStream
}

func (x *resourceStoreListServer) Send(m *ListResourcesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *resourceStoreListServer) Recv() (*ListResourcesRequest, error) {
	m := new(ListResourcesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ResourceStore_ServiceDesc is the grpc.ServiceDesc for ResourceStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "graviflow.api.v1.ResourceStore",
	HandlerType: (*ResourceStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _ResourceStore_Put_Handler,
		},
		{
			MethodName: "Drop",
			Handler:    _ResourceStore_Drop_Handler,
		},
		{
			MethodName: "DropBefore",
			Handler:    _ResourceStore_DropBefore_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _ResourceStore_List_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/v1/resource_store.proto",
}
