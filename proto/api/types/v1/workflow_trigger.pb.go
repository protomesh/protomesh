// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: api/types/v1/workflow_trigger.proto

package typesv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WorkflowTrigger_IDBuilder int32

const (
	// Generate a new random id each time
	WorkflowTrigger_ID_BUILDER_RANDOM WorkflowTrigger_IDBuilder = 0
	// Generate a unique ID for this workflow
	WorkflowTrigger_ID_BUILDER_UNIQUE WorkflowTrigger_IDBuilder = 1
)

// Enum value maps for WorkflowTrigger_IDBuilder.
var (
	WorkflowTrigger_IDBuilder_name = map[int32]string{
		0: "ID_BUILDER_RANDOM",
		1: "ID_BUILDER_UNIQUE",
	}
	WorkflowTrigger_IDBuilder_value = map[string]int32{
		"ID_BUILDER_RANDOM": 0,
		"ID_BUILDER_UNIQUE": 1,
	}
)

func (x WorkflowTrigger_IDBuilder) Enum() *WorkflowTrigger_IDBuilder {
	p := new(WorkflowTrigger_IDBuilder)
	*p = x
	return p
}

func (x WorkflowTrigger_IDBuilder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowTrigger_IDBuilder) Descriptor() protoreflect.EnumDescriptor {
	return file_api_types_v1_workflow_trigger_proto_enumTypes[0].Descriptor()
}

func (WorkflowTrigger_IDBuilder) Type() protoreflect.EnumType {
	return &file_api_types_v1_workflow_trigger_proto_enumTypes[0]
}

func (x WorkflowTrigger_IDBuilder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowTrigger_IDBuilder.Descriptor instead.
func (WorkflowTrigger_IDBuilder) EnumDescriptor() ([]byte, []int) {
	return file_api_types_v1_workflow_trigger_proto_rawDescGZIP(), []int{0, 0}
}

type WorkflowTrigger_IfRunningAction int32

const (
	// Abort the current event to keep the running
	WorkflowTrigger_IF_RUNNING_ABORT WorkflowTrigger_IfRunningAction = 0
	// Cancel the running workflow and start the current event
	WorkflowTrigger_IF_RUNNING_OVERLAP WorkflowTrigger_IfRunningAction = 1
)

// Enum value maps for WorkflowTrigger_IfRunningAction.
var (
	WorkflowTrigger_IfRunningAction_name = map[int32]string{
		0: "IF_RUNNING_ABORT",
		1: "IF_RUNNING_OVERLAP",
	}
	WorkflowTrigger_IfRunningAction_value = map[string]int32{
		"IF_RUNNING_ABORT":   0,
		"IF_RUNNING_OVERLAP": 1,
	}
)

func (x WorkflowTrigger_IfRunningAction) Enum() *WorkflowTrigger_IfRunningAction {
	p := new(WorkflowTrigger_IfRunningAction)
	*p = x
	return p
}

func (x WorkflowTrigger_IfRunningAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowTrigger_IfRunningAction) Descriptor() protoreflect.EnumDescriptor {
	return file_api_types_v1_workflow_trigger_proto_enumTypes[1].Descriptor()
}

func (WorkflowTrigger_IfRunningAction) Type() protoreflect.EnumType {
	return &file_api_types_v1_workflow_trigger_proto_enumTypes[1]
}

func (x WorkflowTrigger_IfRunningAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowTrigger_IfRunningAction.Descriptor instead.
func (WorkflowTrigger_IfRunningAction) EnumDescriptor() ([]byte, []int) {
	return file_api_types_v1_workflow_trigger_proto_rawDescGZIP(), []int{0, 1}
}

type WorkflowTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the workflow to trigger
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Task queue on temporal to send workflow tasks
	TaskQueue string `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	IdPrefix  string `protobuf:"bytes,3,opt,name=id_prefix,json=idPrefix,proto3" json:"id_prefix,omitempty"`
	// Types that are assignable to IdSuffix:
	//
	//	*WorkflowTrigger_ExactIdSuffix
	//	*WorkflowTrigger_IdSuffixBuilder
	IdSuffix isWorkflowTrigger_IdSuffix `protobuf_oneof:"id_suffix"`
	// Types that are assignable to IfRunning:
	//
	//	*WorkflowTrigger_IfRunningAction_
	IfRunning        isWorkflowTrigger_IfRunning  `protobuf_oneof:"if_running"`
	ExecutionTimeout *durationpb.Duration         `protobuf:"bytes,8,opt,name=execution_timeout,json=executionTimeout,proto3" json:"execution_timeout,omitempty"`
	RunTimeout       *durationpb.Duration         `protobuf:"bytes,9,opt,name=run_timeout,json=runTimeout,proto3" json:"run_timeout,omitempty"`
	TaskTimeout      *durationpb.Duration         `protobuf:"bytes,10,opt,name=task_timeout,json=taskTimeout,proto3" json:"task_timeout,omitempty"`
	Arguments        *structpb.Value              `protobuf:"bytes,11,opt,name=arguments,proto3" json:"arguments,omitempty"`
	RetryPolicy      *WorkflowTrigger_RetryPolicy `protobuf:"bytes,12,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
}

func (x *WorkflowTrigger) Reset() {
	*x = WorkflowTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_workflow_trigger_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowTrigger) ProtoMessage() {}

func (x *WorkflowTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_workflow_trigger_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowTrigger.ProtoReflect.Descriptor instead.
func (*WorkflowTrigger) Descriptor() ([]byte, []int) {
	return file_api_types_v1_workflow_trigger_proto_rawDescGZIP(), []int{0}
}

func (x *WorkflowTrigger) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowTrigger) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *WorkflowTrigger) GetIdPrefix() string {
	if x != nil {
		return x.IdPrefix
	}
	return ""
}

func (m *WorkflowTrigger) GetIdSuffix() isWorkflowTrigger_IdSuffix {
	if m != nil {
		return m.IdSuffix
	}
	return nil
}

func (x *WorkflowTrigger) GetExactIdSuffix() string {
	if x, ok := x.GetIdSuffix().(*WorkflowTrigger_ExactIdSuffix); ok {
		return x.ExactIdSuffix
	}
	return ""
}

func (x *WorkflowTrigger) GetIdSuffixBuilder() WorkflowTrigger_IDBuilder {
	if x, ok := x.GetIdSuffix().(*WorkflowTrigger_IdSuffixBuilder); ok {
		return x.IdSuffixBuilder
	}
	return WorkflowTrigger_ID_BUILDER_RANDOM
}

func (m *WorkflowTrigger) GetIfRunning() isWorkflowTrigger_IfRunning {
	if m != nil {
		return m.IfRunning
	}
	return nil
}

func (x *WorkflowTrigger) GetIfRunningAction() WorkflowTrigger_IfRunningAction {
	if x, ok := x.GetIfRunning().(*WorkflowTrigger_IfRunningAction_); ok {
		return x.IfRunningAction
	}
	return WorkflowTrigger_IF_RUNNING_ABORT
}

func (x *WorkflowTrigger) GetExecutionTimeout() *durationpb.Duration {
	if x != nil {
		return x.ExecutionTimeout
	}
	return nil
}

func (x *WorkflowTrigger) GetRunTimeout() *durationpb.Duration {
	if x != nil {
		return x.RunTimeout
	}
	return nil
}

func (x *WorkflowTrigger) GetTaskTimeout() *durationpb.Duration {
	if x != nil {
		return x.TaskTimeout
	}
	return nil
}

func (x *WorkflowTrigger) GetArguments() *structpb.Value {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *WorkflowTrigger) GetRetryPolicy() *WorkflowTrigger_RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

type isWorkflowTrigger_IdSuffix interface {
	isWorkflowTrigger_IdSuffix()
}

type WorkflowTrigger_ExactIdSuffix struct {
	// Use this exact id for the workflow id
	ExactIdSuffix string `protobuf:"bytes,4,opt,name=exact_id_suffix,json=exactIdSuffix,proto3,oneof"`
}

type WorkflowTrigger_IdSuffixBuilder struct {
	IdSuffixBuilder WorkflowTrigger_IDBuilder `protobuf:"varint,5,opt,name=id_suffix_builder,json=idSuffixBuilder,proto3,enum=graviflow.api.types.v1.WorkflowTrigger_IDBuilder,oneof"`
}

func (*WorkflowTrigger_ExactIdSuffix) isWorkflowTrigger_IdSuffix() {}

func (*WorkflowTrigger_IdSuffixBuilder) isWorkflowTrigger_IdSuffix() {}

type isWorkflowTrigger_IfRunning interface {
	isWorkflowTrigger_IfRunning()
}

type WorkflowTrigger_IfRunningAction_ struct {
	IfRunningAction WorkflowTrigger_IfRunningAction `protobuf:"varint,6,opt,name=if_running_action,json=ifRunningAction,proto3,enum=graviflow.api.types.v1.WorkflowTrigger_IfRunningAction,oneof"`
}

func (*WorkflowTrigger_IfRunningAction_) isWorkflowTrigger_IfRunning() {}

type WorkflowTrigger_RetryPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitialInterval    *durationpb.Duration `protobuf:"bytes,1,opt,name=initial_interval,json=initialInterval,proto3" json:"initial_interval,omitempty"`
	MaximumBackoff     *durationpb.Duration `protobuf:"bytes,2,opt,name=maximum_backoff,json=maximumBackoff,proto3" json:"maximum_backoff,omitempty"`
	MaximumAttempts    int32                `protobuf:"varint,3,opt,name=maximum_attempts,json=maximumAttempts,proto3" json:"maximum_attempts,omitempty"`
	NonRetryableErrors []string             `protobuf:"bytes,4,rep,name=non_retryable_errors,json=nonRetryableErrors,proto3" json:"non_retryable_errors,omitempty"`
}

func (x *WorkflowTrigger_RetryPolicy) Reset() {
	*x = WorkflowTrigger_RetryPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_workflow_trigger_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowTrigger_RetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowTrigger_RetryPolicy) ProtoMessage() {}

func (x *WorkflowTrigger_RetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_workflow_trigger_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowTrigger_RetryPolicy.ProtoReflect.Descriptor instead.
func (*WorkflowTrigger_RetryPolicy) Descriptor() ([]byte, []int) {
	return file_api_types_v1_workflow_trigger_proto_rawDescGZIP(), []int{0, 0}
}

func (x *WorkflowTrigger_RetryPolicy) GetInitialInterval() *durationpb.Duration {
	if x != nil {
		return x.InitialInterval
	}
	return nil
}

func (x *WorkflowTrigger_RetryPolicy) GetMaximumBackoff() *durationpb.Duration {
	if x != nil {
		return x.MaximumBackoff
	}
	return nil
}

func (x *WorkflowTrigger_RetryPolicy) GetMaximumAttempts() int32 {
	if x != nil {
		return x.MaximumAttempts
	}
	return 0
}

func (x *WorkflowTrigger_RetryPolicy) GetNonRetryableErrors() []string {
	if x != nil {
		return x.NonRetryableErrors
	}
	return nil
}

var File_api_types_v1_workflow_trigger_proto protoreflect.FileDescriptor

var file_api_types_v1_workflow_trigger_proto_rawDesc = []byte{
	0x0a, 0x23, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x67, 0x72, 0x61, 0x76, 0x69, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x08, 0x0a, 0x0f,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x28, 0x0a, 0x0f, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x78, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x5f, 0x0a, 0x11, 0x69, 0x64, 0x5f,
	0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x72, 0x61, 0x76, 0x69, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x44,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x64, 0x53, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x11, 0x69, 0x66,
	0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x72, 0x61, 0x76, 0x69, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x49,
	0x66, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01,
	0x52, 0x0f, 0x69, 0x66, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x46, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x72, 0x75, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x0c, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x67, 0x72, 0x61, 0x76, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x1a, 0xf4, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x44, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x12, 0x29, 0x0a, 0x10, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x61, 0x62,
	0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x39, 0x0a, 0x09, 0x49, 0x44, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x44, 0x5f, 0x42, 0x55, 0x49, 0x4c,
	0x44, 0x45, 0x52, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x49, 0x44, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x49, 0x51, 0x55,
	0x45, 0x10, 0x01, 0x22, 0x3f, 0x0a, 0x0f, 0x49, 0x66, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x46, 0x5f, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x49, 0x46, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c,
	0x41, 0x50, 0x10, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x69, 0x64, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x69, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x42,
	0xee, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x72, 0x61, 0x76, 0x69, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x14,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x74, 0x65, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x47, 0x41, 0x54, 0xaa, 0x02, 0x16,
	0x47, 0x72, 0x61, 0x76, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x16, 0x47, 0x72, 0x61, 0x76, 0x69, 0x66, 0x6c,
	0x6f, 0x77, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x22, 0x47, 0x72, 0x61, 0x76, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x41, 0x70, 0x69, 0x5c,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x47, 0x72, 0x61, 0x76, 0x69, 0x66, 0x6c, 0x6f, 0x77,
	0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x54, 0x79, 0x70, 0x65, 0x73, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_types_v1_workflow_trigger_proto_rawDescOnce sync.Once
	file_api_types_v1_workflow_trigger_proto_rawDescData = file_api_types_v1_workflow_trigger_proto_rawDesc
)

func file_api_types_v1_workflow_trigger_proto_rawDescGZIP() []byte {
	file_api_types_v1_workflow_trigger_proto_rawDescOnce.Do(func() {
		file_api_types_v1_workflow_trigger_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_types_v1_workflow_trigger_proto_rawDescData)
	})
	return file_api_types_v1_workflow_trigger_proto_rawDescData
}

var file_api_types_v1_workflow_trigger_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_types_v1_workflow_trigger_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_api_types_v1_workflow_trigger_proto_goTypes = []interface{}{
	(WorkflowTrigger_IDBuilder)(0),       // 0: graviflow.api.types.v1.WorkflowTrigger.IDBuilder
	(WorkflowTrigger_IfRunningAction)(0), // 1: graviflow.api.types.v1.WorkflowTrigger.IfRunningAction
	(*WorkflowTrigger)(nil),              // 2: graviflow.api.types.v1.WorkflowTrigger
	(*WorkflowTrigger_RetryPolicy)(nil),  // 3: graviflow.api.types.v1.WorkflowTrigger.RetryPolicy
	(*durationpb.Duration)(nil),          // 4: google.protobuf.Duration
	(*structpb.Value)(nil),               // 5: google.protobuf.Value
}
var file_api_types_v1_workflow_trigger_proto_depIdxs = []int32{
	0, // 0: graviflow.api.types.v1.WorkflowTrigger.id_suffix_builder:type_name -> graviflow.api.types.v1.WorkflowTrigger.IDBuilder
	1, // 1: graviflow.api.types.v1.WorkflowTrigger.if_running_action:type_name -> graviflow.api.types.v1.WorkflowTrigger.IfRunningAction
	4, // 2: graviflow.api.types.v1.WorkflowTrigger.execution_timeout:type_name -> google.protobuf.Duration
	4, // 3: graviflow.api.types.v1.WorkflowTrigger.run_timeout:type_name -> google.protobuf.Duration
	4, // 4: graviflow.api.types.v1.WorkflowTrigger.task_timeout:type_name -> google.protobuf.Duration
	5, // 5: graviflow.api.types.v1.WorkflowTrigger.arguments:type_name -> google.protobuf.Value
	3, // 6: graviflow.api.types.v1.WorkflowTrigger.retry_policy:type_name -> graviflow.api.types.v1.WorkflowTrigger.RetryPolicy
	4, // 7: graviflow.api.types.v1.WorkflowTrigger.RetryPolicy.initial_interval:type_name -> google.protobuf.Duration
	4, // 8: graviflow.api.types.v1.WorkflowTrigger.RetryPolicy.maximum_backoff:type_name -> google.protobuf.Duration
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_api_types_v1_workflow_trigger_proto_init() }
func file_api_types_v1_workflow_trigger_proto_init() {
	if File_api_types_v1_workflow_trigger_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_types_v1_workflow_trigger_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_v1_workflow_trigger_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowTrigger_RetryPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_types_v1_workflow_trigger_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*WorkflowTrigger_ExactIdSuffix)(nil),
		(*WorkflowTrigger_IdSuffixBuilder)(nil),
		(*WorkflowTrigger_IfRunningAction_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_types_v1_workflow_trigger_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_types_v1_workflow_trigger_proto_goTypes,
		DependencyIndexes: file_api_types_v1_workflow_trigger_proto_depIdxs,
		EnumInfos:         file_api_types_v1_workflow_trigger_proto_enumTypes,
		MessageInfos:      file_api_types_v1_workflow_trigger_proto_msgTypes,
	}.Build()
	File_api_types_v1_workflow_trigger_proto = out.File
	file_api_types_v1_workflow_trigger_proto_rawDesc = nil
	file_api_types_v1_workflow_trigger_proto_goTypes = nil
	file_api_types_v1_workflow_trigger_proto_depIdxs = nil
}
